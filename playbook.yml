---
- name: Bootstrap Docker Container
  hosts: all
  become: yes
  gather_facts: false
  pre_tasks:
    # This is to prevent error: could not get lock on /var/lib/dpkg/lock
    - name: Wait for any possibly running unattended upgrade to finish
      raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true
      ignore_errors: true

    - name: Update apt cache.
      raw: apt-get update
      retries: 30
      delay: 10
      ignore_errors: true

    # See https://github.com/ansible/ansible/issues/16593#issuecomment-253026793
    - name: Wait for auto-update Ubuntu does on first boot to complete.
      become: yes
      shell: while sudo fuser /var/lib/dpkg/{{ item }} >/dev/null 2>&1 ; do sleep 1 ; done
      loop:
        - lock
        - lock-frontend

    # This is needed because gather_facts a.k.a setup errors out if python is unavailable
    - name: Install Python2 if not available
      vars:
        - ansible_python_interpreter: /usr/bin/python3
      raw: test -e /usr/bin/python || (apt -y update && DEBIAN_FRONTEND=noninteractive apt install -y python-minimal)
      retries: 30
      delay: 10
    - setup: # aka gather_facts
  tasks:
    - name: Check if Docker is installed
      command: docker
      register: docker_installed
      ignore_errors: true

    - name: Install Docker
      include_role:
        name: docker
      vars:
        docker_users:
          - ubuntu
        docker_install_compose: false
      when: "docker_installed is failed"

    - name: Install system packages
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - python-backports.ssl-match-hostname
        - python-pip
      register: pkg_result
      until: pkg_result is success
      retries: 10
      delay: 10

    - name: Install pip modules
      pip:
        name: ['docker']
        state: present

    # Note that this task does not wait for the container to exit/end execution
    - name: "Boot Container {{ docker_container_name }}"
      docker_container:
        name: "{{ docker_container_name }}"
        image: "{{ docker_boot_image }}"
        volumes: "{{ docker_volumes|default([], true) }}"
        published_ports: "{{ docker_ports|default([], true) }}"
        env: "{{ docker_env|default({}, true) }}"
      when: docker_container_name is defined

    # Allow execution of shell command
    - name: "Running shell command {{ ansible_shell_command }}"
      shell: "{{ ansible_shell_command }}"
      when: ansible_shell_command is defined
